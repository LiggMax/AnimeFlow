name: Build Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "Select platform to build"
        options:
          - android
          - ios
          - macos
          - windows
          - linux
          - all
        default: "all"

jobs:
  build-android:
    if: ${{ github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build android
        run: |
          flutter build apk
          echo "Android build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-android
          path: build/app/outputs/flutter-apk/*.apk
          if-no-files-found: ignore

  build-linux:
    if: ${{ github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libasound2-dev libmpv-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: |
          flutter build linux
          echo "Linux build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux
          path: build/linux/
          if-no-files-found: ignore

  build-windows:
    if: ${{ github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all'}}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          $content = Get-Content pubspec.yaml -Raw
          $match = [regex]::Match($content, '^name:\s*(\S+)', [System.Text.RegularExpressions.RegexOptions]::Multiline)
          if ($match.Success) {
            $APP_NAME = $match.Groups[1].Value.Trim()
          } else {
            $APP_NAME = "AnimeFlow"
          }
          echo "APP_NAME=$APP_NAME" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows
          echo "Windows build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows
          path: build/windows/x64/runner/Release/
          if-no-files-found: ignore

  build-macos:
    if: ${{ github.event.inputs.platform == 'macos' || github.event.inputs.platform == 'all' }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos
          echo "macOS build completed"

      - name : Create DMG
        run: |
          mkdir -p build/dist
          cp -a build/macos/Build/Products/Release/AnimeFlow.app build/dist
          ln -s /Applications build/dist/Applications
          hdiutil create -fs HFS+ -volname ${{ env.APP_NAME }} -srcfolder build/dist ${{ env.APP_NAME }}.dmg

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos
          path: build/macos/Build/Products/Release/AnimeFlow.app
          if-no-files-found: ignore

  build-ios:
    if: ${{ github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all'}}
    runs-on: macos-latest  # macOS-15 with Xcode 16.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: System and Xcode Configuration
        run: |
          echo "=== System Information ==="
          sw_vers
          
          echo "=== Xcode Configuration ==="
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          xcodebuild -version
          
          echo "=== Available iOS SDKs ==="
          xcodebuild -showsdks | grep iphoneos
          
          echo "=== Available Simulator Runtimes ==="
          xcrun simctl list runtimes
          
          # 获取最新可用的iOS SDK版本
          LATEST_IOS_SDK=$(xcodebuild -showsdks | grep iphoneos | tail -1 | awk '{print $NF}')
          echo "Latest available iOS SDK: $LATEST_IOS_SDK"
          echo "LATEST_IOS_SDK=$LATEST_IOS_SDK" >> $GITHUB_ENV

      - name: Get app name
        id: app_name
        run: |          
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          flutter pub get
          cd ios && pod install --repo-update && cd ..

      - name: Build IPA
        run: |
          # 设置更低的部署目标以确保兼容性
          export IPHONEOS_DEPLOYMENT_TARGET=11.0
          
          echo "=== iOS Build Configuration ==="
          echo "Deployment Target: $IPHONEOS_DEPLOYMENT_TARGET"
          
          # 检查可用的iOS SDKs
          echo "=== Available iOS SDKs ==="
          xcodebuild -showsdks | grep -E "(iphoneos|iphonesimulator)"
          
          echo "=== Available Simulators ==="
          xcrun simctl list devices available | head -5
          
          # 简化的构建策略
          echo "=== Attempting iOS Build ==="
          
          # 策略1: 使用Flutter命令构建设备版本
          if flutter build ios --release --no-codesign; then
            echo "✅ iOS device build completed"
            BUILD_TYPE="device"
            BUILD_PATH="build/ios/iphoneos/Runner.app"
          else
            echo "❌ Device build failed, trying simulator build..."
            
            # 策略2: 使用Flutter命令构建模拟器版本
            if flutter build ios --debug --no-codesign --simulator; then
              echo "✅ iOS simulator build completed"
              BUILD_TYPE="simulator"
              BUILD_PATH="build/ios/iphonesimulator/Runner.app"
            else
              echo "❌ All build strategies failed"
              exit 1
            fi
          fi
          
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          echo "BUILD_PATH=$BUILD_PATH" >> $GITHUB_ENV
          echo "Final build configuration: Type=$BUILD_TYPE, Path=$BUILD_PATH"

      - name: Create IPA
        run: |
          echo "=== Creating IPA Package ==="
          echo "Build Type: $BUILD_TYPE"
          echo "Build Path: $BUILD_PATH"
          
          # 检查构建产物是否存在
          if [ ! -d "$BUILD_PATH" ]; then
            echo "❌ Build artifact not found at: $BUILD_PATH"
            echo "Available .app files:"
            find build -name "*.app" -type d || true
            exit 1
          fi
          
          # 创建IPA包
          mkdir -p Payload
          cp -R "$BUILD_PATH" Payload/Runner.app
          zip -q -r ${{ env.APP_NAME }}.ipa Payload
          
          # 验证IPA文件
          if [ -f "${{ env.APP_NAME }}.ipa" ]; then
            echo "✅ IPA created successfully: ${{ env.APP_NAME }}.ipa"
            ls -lh ${{ env.APP_NAME }}.ipa
          else
            echo "❌ Failed to create IPA file"
            exit 1
          fi

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-ios
          path: ${{ env.APP_NAME }}.ipa
          if-no-files-found: ignore
