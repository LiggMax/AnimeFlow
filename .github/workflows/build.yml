name: Build Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "Select platform to build"
        options:
          - android
          - ios
          - macos
          - windows
          - linux
          - all
        default: "all"

jobs:
  build-android:
    if: ${{ github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build android
        run: |
          flutter build apk
          echo "Android build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-android
          path: build/app/outputs/flutter-apk/*.apk
          if-no-files-found: ignore

  build-linux:
    if: ${{ github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libasound2-dev libmpv-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: |
          flutter build linux
          echo "Linux build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux
          path: build/linux/
          if-no-files-found: ignore

  build-windows:
    if: ${{ github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all'}}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          $content = Get-Content pubspec.yaml -Raw
          $match = [regex]::Match($content, '^name:\s*(\S+)', [System.Text.RegularExpressions.RegexOptions]::Multiline)
          if ($match.Success) {
            $APP_NAME = $match.Groups[1].Value.Trim()
          } else {
            $APP_NAME = "AnimeFlow"
          }
          echo "APP_NAME=$APP_NAME" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows
          echo "Windows build completed"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows
          path: build/windows/x64/runner/Release/
          if-no-files-found: ignore

  build-macos:
    if: ${{ github.event.inputs.platform == 'macos' || github.event.inputs.platform == 'all' }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get app name
        id: app_name
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos
          echo "macOS build completed"

      - name : Create DMG
        run: |
          mkdir -p build/dist
          cp -a build/macos/Build/Products/Release/AnimeFlow.app build/dist
          ln -s /Applications build/dist/Applications
          hdiutil create -fs HFS+ -volname ${{ env.APP_NAME }} -srcfolder build/dist ${{ env.APP_NAME }}.dmg

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos
          path: build/macos/Build/Products/Release/AnimeFlow.app
          if-no-files-found: ignore

  build-ios:
    if: ${{ github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all'}}
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Configure Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          xcodebuild -version
          xcodebuild -showsdks

      - name: Get app name
        id: app_name
        run: |          
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          if [ -z "$APP_NAME" ]; then
            APP_NAME="AnimeFlow"
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          flutter pub get
          cd ios && pod install --repo-update && cd ..

      - name: Build IPA
        run: |
          # 设置部署目标以确保兼容性
          export IPHONEOS_DEPLOYMENT_TARGET=12.0
          
          # 检查环境信息
          echo "=== Environment Information ==="
          echo "Xcode version:"
          xcodebuild -version
          echo "Available iOS SDKs:"
          xcodebuild -showsdks | grep ios
          echo "Available simulators:"
          xcrun simctl list devices available | head -20
          
          # 根据GitHub Actions官方文档建议，优先使用设备构建
          echo "=== Attempting iOS Device Build (Release) ==="
          if flutter build ios --release --no-codesign; then
            echo "✅ iOS device build completed successfully"
            BUILD_TYPE="device"
            BUILD_PATH="build/ios/iphoneos/Runner.app"
          else
            echo "❌ Device build failed, trying simulator approach..."
            
            # 备选方案：使用模拟器Debug构建
            echo "=== Attempting iOS Simulator Build (Debug) ==="
            if flutter build ios --debug --no-codesign --simulator; then
              echo "✅ iOS simulator build completed successfully"
              BUILD_TYPE="simulator"
              BUILD_PATH="build/ios/iphonesimulator/Runner.app"
            else
              echo "❌ Simulator build also failed, trying cleanup and retry..."
              
              # 最后的备选方案：清理后重试
              echo "=== Cleanup and Retry ==="
              flutter clean
              flutter pub get
              cd ios && pod deintegrate && pod install --repo-update && cd ..
              
              # 重试设备构建
              if flutter build ios --release --no-codesign; then
                echo "✅ iOS device build completed after cleanup"
                BUILD_TYPE="device"
                BUILD_PATH="build/ios/iphoneos/Runner.app"
              else
                echo "❌ All build attempts failed"
                exit 1
              fi
            fi
          fi
          
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          echo "BUILD_PATH=$BUILD_PATH" >> $GITHUB_ENV
          echo "Final build type: $BUILD_TYPE"
          echo "Build path: $BUILD_PATH"

      - name: Create IPA
        run: |          
          mkdir Payload
          cp -R build/ios/iphonesimulator/Runner.app Payload/Runner.app
          zip -q -r ${{ env.APP_NAME }}.ipa Payload

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-ios
          path: ${{ env.APP_NAME }}.ipa
          if-no-files-found: ignore
