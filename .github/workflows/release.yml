name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      platform:
        type: choice
        description: "Select platform to release"
        options:
          - android
          - ios
          - macos
          - windows
          - linux
          - all
        default: "all"
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  FLUTTER_VERSION: stable

jobs:
  # 获取版本信息
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_name: ${{ steps.get_version.outputs.version_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # 移除v前缀获取版本号
          VERSION_NAME="${VERSION#v}"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

  # 获取应用信息
  get-app-info:
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.get_app_info.outputs.app_name }}
      app_version: ${{ steps.get_app_info.outputs.app_version }}
      app_name_version: ${{ steps.get_app_info.outputs.app_name_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get app name and version
        id: get_app_info
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name:[[:space:]]*//' | tr -d ' ')
          APP_VERSION=$(grep '^version:' pubspec.yaml | sed 's/^version:[[:space:]]*//' | tr -d ' ')
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "app_name_version=${APP_NAME}-${APP_VERSION}" >> $GITHUB_OUTPUT

  # 构建Android版本
  build-android:
    needs: [get-version, get-app-info]
    if: ${{ github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: |
          flutter build apk --release
          echo "Android APK build completed"

      - name: Build Android App Bundle
        run: |
          flutter build appbundle --release
          echo "Android App Bundle build completed"

      - name: Archive Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.get-app-info.outputs.app_name_version }}-android
          path: |
            build/app/outputs/flutter-apk/*.apk
          if-no-files-found: error

  # 构建Linux版本
  build-linux:
    needs: [get-version, get-app-info]
    if: ${{ github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libasound2-dev libmpv-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: |
          flutter build linux --release
          echo "Linux build completed"

      - name: Package Linux artifacts (.tar.gz and .deb)
        run: |
          # 创建tar.gz包
          tar -czvf "${{ needs.get-app-info.outputs.app_name_version }}-linux.tar.gz" -C build/linux/x64/release bundle
          
          DEB_DIR="${{ needs.get-app-info.outputs.app_name }}_${{ needs.get-app-info.outputs.app_version }}_amd64"
          mkdir -p "$DEB_DIR/usr/bin"
          mkdir -p "$DEB_DIR/usr/lib"
          mkdir -p "$DEB_DIR/DEBIAN"
          mkdir -p "$DEB_DIR/usr/share/applications"
          mkdir -p "$DEB_DIR/usr/share/icons/hicolor/256x256/apps"
          
          cp -r build/linux/x64/release/bundle/* "$DEB_DIR/usr/bin/"
          
          cat > "$DEB_DIR/DEBIAN/control" <<EOF
          Package: ${{ needs.get-app-info.outputs.app_name }}
          Version: ${{ needs.get-app-info.outputs.app_version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
          Description: AnimeFlow - A Flutter anime streaming application
           A cross-platform application for streaming anime content.
          EOF
          
          cat > "$DEB_DIR/usr/share/applications/${{ needs.get-app-info.outputs.app_name }}.desktop" <<EOF
          [Desktop Entry]
          Name=${{ needs.get-app-info.outputs.app_name }}
          Exec=${{ needs.get-app-info.outputs.app_name }}
          Type=Application
          Categories=Utility;
          EOF
          
          dpkg-deb --build --root-owner-group "$DEB_DIR"
          
          mv "${DEB_DIR}.deb" "${{ needs.get-app-info.outputs.app_name_version }}-linux.deb"

      - name: Archive Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.get-app-info.outputs.app_name_version }}-linux
          path: |
            ${{ needs.get-app-info.outputs.app_name_version }}-linux.tar.gz
            ${{ needs.get-app-info.outputs.app_name_version }}-linux.deb
          if-no-files-found: error

  # 构建Windows版本
  build-windows:
    needs: [get-version, get-app-info]
    if: ${{ github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all' || github.event_name == 'push' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows --release
          echo "Windows build completed"

      - name: Package Windows artifacts
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath ../../../../../${{ needs.get-app-info.outputs.app_name_version }}-windows.zip
          cd ../../../../../

      - name: Archive Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.get-app-info.outputs.app_name_version }}-windows
          path: ${{ needs.get-app-info.outputs.app_name_version }}-windows.zip
          if-no-files-found: error

  # 构建macOS版本
  build-macos:
    needs: [get-version, get-app-info]
    if: ${{ github.event.inputs.platform == 'macos' || github.event.inputs.platform == 'all' || github.event_name == 'push' }}
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos --release
          echo "macOS build completed"

      - name: Create DMG
        run: |
          mkdir -p build/dist
          cp -a build/macos/Build/Products/Release/${{ needs.get-app-info.outputs.app_name }}.app build/dist
          ln -s /Applications build/dist/Applications
          hdiutil create -fs HFS+ -volname "${{ needs.get-app-info.outputs.app_name_version }}" -srcfolder build/dist "${{ needs.get-app-info.outputs.app_name_version }}.dmg"

      - name: Archive macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.get-app-info.outputs.app_name_version }}-macos
          path: ${{ needs.get-app-info.outputs.app_name_version }}.dmg
          if-no-files-found: error

  # 构建iOS版本
  build-ios:
    needs: [get-version, get-app-info]
    if: ${{ github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all' || github.event_name == 'push' }}
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          echo "iOS build completed"

      - name: Create IPA
        run: |
          mkdir Payload
          cp -R build/ios/iphoneos/Runner.app Payload/Runner.app
          zip -q -r "${{ needs.get-app-info.outputs.app_name_version }}.ipa" Payload

      - name: Archive iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.get-app-info.outputs.app_name_version }}-ios
          path: "${{ needs.get-app-info.outputs.app_name_version }}.ipa"
          if-no-files-found: error

  # 创建GitHub Release
  create-release:
    needs: [get-version, get-app-info, build-android, build-linux, build-windows, build-macos, build-ios]
    if: ${{ github.event.inputs.create_release != 'false' && github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts structure ==="
          find artifacts -type f -name "*" | head -20
          echo "=== End of artifacts list ==="

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: ${{ needs.get-app-info.outputs.app_name }} ${{ needs.get-version.outputs.version_name }}
          body: |
            ## 🎉 Release ${{ needs.get-version.outputs.version_name }}
            
            ### 正式发布第一个版本${{needs.get-version}}
            ### 📱 支持的平台
            - Android (apk)
            - iOS (ipa)
            - macOS ( dmg)
            - Windows (exe)
            - Linux (tar.gz, deb)
            
            ### 📦 下载
            请从下方附件中下载对应平台的安装包。
            
            ### 🔄 更新内容
            - 初步实现番剧信息展示，番剧播放
          files: |
            artifacts/**/*.apk
            artifacts/**/*.ipa
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
            artifacts/**/*.deb
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 自动创建Release（当推送tag时）
  auto-create-release:
    needs: [get-version, get-app-info, build-android, build-linux, build-windows, build-macos, build-ios]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts structure ==="
          find artifacts -type f -name "*" | head -20
          echo "=== End of artifacts list ==="

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: ${{ needs.get-app-info.outputs.app_name }} ${{ needs.get-version.outputs.version_name }}
          body: |
            ## 🎉 Release ${{ needs.get-version.outputs.version_name }}
            
            ### 正式发布第一个版本${{needs.get-version}}
            ### 📱 支持的平台
            - Android (apk)
            - iOS (ipa)
            - macOS ( dmg)
            - Windows (exe)
            - Linux (tar.gz, deb)
            
            ### 📦 下载
            请从下方附件中下载对应平台的安装包。
            
            ### 🔄 更新内容
            - ${{needs.get-version}}版本正式发布
            - 初步实现番剧信息展示，番剧播放
            - 这是一个里程碑版本，实现了基本的流媒体功能，但功能依旧有很多不完善需要等待后续的叠氮更新
          files: |
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-android/*.apk
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-ios/*.ipa
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-macos/*.dmg
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-windows/*.zip
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-linux/*.tar.gz
            artifacts/${{ needs.get-app-info.outputs.app_name_version }}-linux/*.deb
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
